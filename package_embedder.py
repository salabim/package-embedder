import base64
import zlib
from pathlib import Path
import sys
import PySimpleGUI as sg


def package_location(package):
    for path in sys.path:
        ppath = Path(path)
        if ppath.resolve() != Path.cwd().resolve():
            if ppath.stem == "site-packages":
                if (ppath / package).is_dir():
                    return ppath / package
    return None


def embed(infile, selected_packages):

    with open(infile, "r") as f:
        inlines = f.read().split("\n")

    with open(outfile, "w") as out:
        if inlines[0].startswith("#!"):
            print(inlines[0], file=out)
            inlines.pop(0)

        print("#  file generated by package embedder from", file=out)
        print("#      source file: " + str(infile), file=out)
        print("#      packages embedded: " + ", ".join(package for (package, _, _) in selected_packages), file=out)
        print(file=out)
        print("def embed(package, prefer_installed, filecontents):", file=out)
        print("    import tempfile", file=out)
        print("    import shutil", file=out)
        print("    import sys", file=out)
        print("    from pathlib import Path", file=out)
        print("    import zlib", file=out)
        print("    import base64", file=out)
        print("    target_dir = Path(tempfile.gettempdir()) / ('embedded_'+package) ", file=out)
        print("    if target_dir.is_dir():", file=out)
        print("        shutil.rmtree(target_dir, ignore_errors=True)", file=out)
        print("    for file, contents in filecontents:", file=out)
        print("        (target_dir / package).mkdir(parents=True, exist_ok=True)", file=out)
        print("        with open(target_dir / package / file, 'wb') as f:", file=out)
        print("            f.write(zlib.decompress(base64.b64decode(contents)))", file=out)
        print("    if prefer_installed:", file=out)
        print("        sys.path.append(str(target_dir))", file=out)
        print("    else:", file=out)
        print("        sys.path.insert(0, str(target_dir))", file=out)
        print("", file=out)
        for line in inlines[:]:
            if line.startswith("from __future__ import"):
                print(line, file=out)
                inlines.remove(line).menatmental

        embedded_packages = []
        for package, prefer_installed, py_files_only in selected_packages:
            dir = package_location(package)
            if dir:
                embedded_packages.append(package)
                filecontents = {}
                print(
                    f"embed(package={repr(package)}, prefer_installed={repr(prefer_installed)}, filecontents=(",
                    file=out,
                )
                for file in dir.rglob("*.py" if py_files_only else "*.*"):
                    filerel = file.relative_to(dir)
                    if filerel.parts[0] != "__pycache__":
                        with open(file, "rb") as f:
                            fr = f.read()
                            print(
                                f"    ({repr(filerel.as_posix())},{repr(base64.b64encode(zlib.compress(fr)))}),",
                                file=out,
                            )

                print("))", file=out)
                print("del embed", file=out)
                print(file=out)
                for line in inlines:
                    print(line, file=out)
        return embedded_packages


def get_packages(infile):
    exclude_packages = "numpy PIL scipy pandas cv2".split(" ")
    result = []
    with open(infile, "r") as f:
        lines = f.read().split("\n")
        for line in lines:
            if "import" in line:
                parts = line.strip().split(" ") + 3 * ["x"]
                if (parts[0] == "import") or (parts[0] == "from" and parts[2] == "import"):
                    package = parts[1].split(".")[0]
                    if package not in result and package not in exclude_packages and package_location(package):
                        result.append(package)

    return sorted(result, key=str.lower)


if __name__ == "__main__":

    while True:
        window = sg.Window(
            "Package embedder",
            [[sg.Text("File to embed"), sg.Input(size=(80, 1)), sg.FileBrowse()], [sg.OK(), sg.Cancel()]],
        )
        event, values = window.Read()
        window.close()
        if event != "OK":
            break
        infile = values[0]

        infile = Path(infile).resolve()
        if not infile.is_file():
            sg.popup("File " + str(infile) + " not found")
            continue
        outfile = infile.parent / (infile.stem + ".embedded" + infile.suffix)

        candidate_packages = get_packages(infile)
        if candidate_packages == []:
            sg.popup("No embeddable package found in " + str(infile))
            continue

        generate_button = sg.Button("Generate" + str(outfile))
        window = sg.Window(
            "",
            [
                [sg.Text(infile)],
                *(
                    [
                        sg.Checkbox(package, key=(package, "use"), size=(15, 1), enable_events=True, default=True),
                        sg.Checkbox("prefer installed", key=(package, "prefer_installed"), default=False),
                        sg.Checkbox(".py files only", key=(package, "py_files_only"), default=True),
                    ]
                    for package in candidate_packages
                ),
                [generate_button],
                [sg.Cancel()],
            ],
        )

        while True:
            event, values = window.Read()
            if event is None or event == "Cancel":
                break
            if isinstance(event, tuple):
                generate_button.update(visible=any(values[(package, "use")] for package in candidate_packages))
            elif event.startswith("Generate"):

                selected_packages = []
                for package in candidate_packages:
                    if values[package, "use"]:
                        selected_packages.append(
                            (package, values[package, "prefer_installed"], values[package, "py_files_only"])
                        )

                embedded_packages = embed(infile, selected_packages)

                sg.popup("Success", "succesfully embedded\n" + (", ".join(embedded_packages)) + "\nin " + str(outfile))
                break
        window.close()
